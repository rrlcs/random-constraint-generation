(set-logic LIA)
(synth-fun f ((x Int) (y Int)) Int
((I Int) (C Int) (B Bool))
((I Int (x y C
(+ I I)
(- I I)
(* I C)
(* C I)
(div I C)
(mod I C)
(ite B I I)))
(C Int (0 1 2 3 4 5 6 7 8 9))
(B Bool (true false
(and B B)
(or B B)
(=> B B)
(xor B B)
;(xnor B B)
;(nand B B)
;(nor B B)
;(iff B B)
(not B)
(= B B)
(<= I I)
(>= I I)
(< I I)
(> I I)
(= I I)))))
(declare-var x Int)
(declare-var y Int)
(constraint ( and ( <= ( f x y ) ( - ( f x y ) ( f x y ) ) ) ( <= ( - x ( f x y ) ) ( f x y ) ) ))
(check-synth)